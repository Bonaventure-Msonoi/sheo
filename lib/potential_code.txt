
import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:math';
import 'dart:typed_data';
import 'package:tflite_flutter/tflite_flutter.dart';

class SensorData {
  final double temperature;
  final double humidity;

  SensorData({
    required this.temperature,
    required this.humidity,
  });
}

class ModelOutput {
  final String recommendations;

  ModelOutput({
    required this.recommendations,
  });
}

class DataCollectionPage extends StatefulWidget {
  @override
  _DataCollectionPageState createState() => _DataCollectionPageState();
}

class _DataCollectionPageState extends State<DataCollectionPage> {
  List<SensorData> sensorData = [];

  void collectAndPreprocessData() async {
    // Simulate data collection
    SensorData newData = collectSensorData();
    // Simulate data preprocessing
    SensorData preprocessedData = preprocessData(newData);
    // Store preprocessed data
    sensorData.add(preprocessedData);

    // Perform TFLite inference
    ModelOutput modelOutput = await runInference(preprocessedData);

    // Display recommendations
    displayRecommendations(modelOutput);
  }

  SensorData collectSensorData() {
    // Simulate collecting data from sensors
    return SensorData(
      temperature: 25.0,
      humidity: 50.0,
    );
  }

  SensorData preprocessData(SensorData data) {
    // Implement data preprocessing, e.g., scaling, encoding
    return data;
  }

  Future<ModelOutput> runInference(SensorData inputData) async {
    // Load your TFLite model
    await Tflite.loadModel(
      model: 'assets/model.tflite',
    );

    // Prepare input data for TFLite model
    var inputList = [inputData.temperature, inputData.humidity];
    
    // Run inference
    var output = await Tflite.runModelOnMatrix(
      model: 'model',
      matrix: [inputList],
    );

    // Unload the model
    Tflite.close();

    // Process the model output and return recommendations
    return ModelOutput(
      recommendations: 'Model output: $output',
    );
  }

  void displayRecommendations(ModelOutput modelOutput) {
    // Implement UI to display recommendations and actions
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Model Output'),
          content: Text(modelOutput.recommendations),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Data Collection and TFLite Inference'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: collectAndPreprocessData,
              child: Text('Collect and Preprocess Data'),
            ),
            SizedBox(height: 20.0),
            Expanded(
              child: ListView.builder(
                itemCount: sensorData.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text('Temperature: ${sensorData[index].temperature.toString()}Â°C'),
                    subtitle: Text('Humidity: ${sensorData[index].humidity.toString()}%'),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
